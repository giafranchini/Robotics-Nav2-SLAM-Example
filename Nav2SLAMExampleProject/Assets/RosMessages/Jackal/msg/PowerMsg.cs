//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Jackal
{
    [Serializable]
    public class PowerMsg : Message
    {
        public const string k_RosMessageName = "jackal_msgs/Power";
        public override string RosMessageName => k_RosMessageName;

        //  Robot Power readings
        public Std.HeaderMsg header;
        //  AC Power
        public const sbyte NOT_APPLICABLE = -1;
        public sbyte shore_power_connected;
        //  Indicates if AC power is connected.
        public sbyte battery_connected;
        //  Indicates if battery is connected.
        public sbyte power_12v_user_nominal;
        //  Indicates if the 12V user power is good.
        public sbyte charging_complete;
        //  Indicates if charging is complete.
        //  Voltage rails, in volts
        //  Averaged over the message period
        //  Jackal
        public const byte JACKAL_MEASURED_BATTERY = 0;
        public const byte JACKAL_MEASURED_5V = 1;
        public const byte JACKAL_MEASURED_12V = 2;
        public float[] measured_voltages;
        //  Current senses available on platform, in amps.
        //  Averaged over the message period
        //  Jackal
        public const byte JACKAL_TOTAL_CURRENT = 0;
        public const byte JACKAL_COMPUTER_CURRENT = 1;
        public const byte JACKAL_DRIVE_CURRENT = 2;
        public const byte JACKAL_USER_CURRENT = 3;
        public float[] measured_currents;

        public PowerMsg()
        {
            this.header = new Std.HeaderMsg();
            this.shore_power_connected = 0;
            this.battery_connected = 0;
            this.power_12v_user_nominal = 0;
            this.charging_complete = 0;
            this.measured_voltages = new float[0];
            this.measured_currents = new float[0];
        }

        public PowerMsg(Std.HeaderMsg header, sbyte shore_power_connected, sbyte battery_connected, sbyte power_12v_user_nominal, sbyte charging_complete, float[] measured_voltages, float[] measured_currents)
        {
            this.header = header;
            this.shore_power_connected = shore_power_connected;
            this.battery_connected = battery_connected;
            this.power_12v_user_nominal = power_12v_user_nominal;
            this.charging_complete = charging_complete;
            this.measured_voltages = measured_voltages;
            this.measured_currents = measured_currents;
        }

        public static PowerMsg Deserialize(MessageDeserializer deserializer) => new PowerMsg(deserializer);

        private PowerMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.shore_power_connected);
            deserializer.Read(out this.battery_connected);
            deserializer.Read(out this.power_12v_user_nominal);
            deserializer.Read(out this.charging_complete);
            deserializer.Read(out this.measured_voltages, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.measured_currents, sizeof(float), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.shore_power_connected);
            serializer.Write(this.battery_connected);
            serializer.Write(this.power_12v_user_nominal);
            serializer.Write(this.charging_complete);
            serializer.WriteLength(this.measured_voltages);
            serializer.Write(this.measured_voltages);
            serializer.WriteLength(this.measured_currents);
            serializer.Write(this.measured_currents);
        }

        public override string ToString()
        {
            return "PowerMsg: " +
            "\nheader: " + header.ToString() +
            "\nshore_power_connected: " + shore_power_connected.ToString() +
            "\nbattery_connected: " + battery_connected.ToString() +
            "\npower_12v_user_nominal: " + power_12v_user_nominal.ToString() +
            "\ncharging_complete: " + charging_complete.ToString() +
            "\nmeasured_voltages: " + System.String.Join(", ", measured_voltages.ToList()) +
            "\nmeasured_currents: " + System.String.Join(", ", measured_currents.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
