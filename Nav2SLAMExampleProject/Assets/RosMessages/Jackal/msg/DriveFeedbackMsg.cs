//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Jackal
{
    [Serializable]
    public class DriveFeedbackMsg : Message
    {
        public const string k_RosMessageName = "jackal_msgs/DriveFeedback";
        public override string RosMessageName => k_RosMessageName;

        //  This message represents feedback data from a single drive unit (driver + motor).
        //  Current flowing from battery into the MOSFET bridge.
        public float current;
        //  Instantaneous duty cycle of MOSFET bridge.
        public float duty_cycle;
        //  Temperatures measured in the MOSFET bridge and on the motor casing, in deg C.
        public float bridge_temperature;
        public float motor_temperature;
        //  Encoder data
        public float measured_velocity;
        //  rad/s
        public float measured_travel;
        //  rad
        //  True if the underlying driver chip reports a fault condition.
        public bool driver_fault;

        public DriveFeedbackMsg()
        {
            this.current = 0.0f;
            this.duty_cycle = 0.0f;
            this.bridge_temperature = 0.0f;
            this.motor_temperature = 0.0f;
            this.measured_velocity = 0.0f;
            this.measured_travel = 0.0f;
            this.driver_fault = false;
        }

        public DriveFeedbackMsg(float current, float duty_cycle, float bridge_temperature, float motor_temperature, float measured_velocity, float measured_travel, bool driver_fault)
        {
            this.current = current;
            this.duty_cycle = duty_cycle;
            this.bridge_temperature = bridge_temperature;
            this.motor_temperature = motor_temperature;
            this.measured_velocity = measured_velocity;
            this.measured_travel = measured_travel;
            this.driver_fault = driver_fault;
        }

        public static DriveFeedbackMsg Deserialize(MessageDeserializer deserializer) => new DriveFeedbackMsg(deserializer);

        private DriveFeedbackMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.current);
            deserializer.Read(out this.duty_cycle);
            deserializer.Read(out this.bridge_temperature);
            deserializer.Read(out this.motor_temperature);
            deserializer.Read(out this.measured_velocity);
            deserializer.Read(out this.measured_travel);
            deserializer.Read(out this.driver_fault);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.current);
            serializer.Write(this.duty_cycle);
            serializer.Write(this.bridge_temperature);
            serializer.Write(this.motor_temperature);
            serializer.Write(this.measured_velocity);
            serializer.Write(this.measured_travel);
            serializer.Write(this.driver_fault);
        }

        public override string ToString()
        {
            return "DriveFeedbackMsg: " +
            "\ncurrent: " + current.ToString() +
            "\nduty_cycle: " + duty_cycle.ToString() +
            "\nbridge_temperature: " + bridge_temperature.ToString() +
            "\nmotor_temperature: " + motor_temperature.ToString() +
            "\nmeasured_velocity: " + measured_velocity.ToString() +
            "\nmeasured_travel: " + measured_travel.ToString() +
            "\ndriver_fault: " + driver_fault.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
