//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Jackal
{
    [Serializable]
    public class StatusMsg : Message
    {
        public const string k_RosMessageName = "jackal_msgs/Status";
        public override string RosMessageName => k_RosMessageName;

        //  This message represents lower-frequency status updates
        //  Default publish frequency is 1Hz.
        public Std.HeaderMsg header;
        //  Robot Hardware ID
        public string hardware_id;
        //  Firmware commit hash
        public string firmware_commit;
        //  Times since MCU power-on.
        public BuiltinInterfaces.DurationMsg mcu_uptime;
        public BuiltinInterfaces.DurationMsg connection_uptime;
        //  Temperature of MCU's PCB in Celsius.
        public float pcb_temperature;
        public float mcu_temperature;

        public StatusMsg()
        {
            this.header = new Std.HeaderMsg();
            this.hardware_id = "";
            this.firmware_commit = "";
            this.mcu_uptime = new BuiltinInterfaces.DurationMsg();
            this.connection_uptime = new BuiltinInterfaces.DurationMsg();
            this.pcb_temperature = 0.0f;
            this.mcu_temperature = 0.0f;
        }

        public StatusMsg(Std.HeaderMsg header, string hardware_id, string firmware_commit, BuiltinInterfaces.DurationMsg mcu_uptime, BuiltinInterfaces.DurationMsg connection_uptime, float pcb_temperature, float mcu_temperature)
        {
            this.header = header;
            this.hardware_id = hardware_id;
            this.firmware_commit = firmware_commit;
            this.mcu_uptime = mcu_uptime;
            this.connection_uptime = connection_uptime;
            this.pcb_temperature = pcb_temperature;
            this.mcu_temperature = mcu_temperature;
        }

        public static StatusMsg Deserialize(MessageDeserializer deserializer) => new StatusMsg(deserializer);

        private StatusMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.hardware_id);
            deserializer.Read(out this.firmware_commit);
            this.mcu_uptime = BuiltinInterfaces.DurationMsg.Deserialize(deserializer);
            this.connection_uptime = BuiltinInterfaces.DurationMsg.Deserialize(deserializer);
            deserializer.Read(out this.pcb_temperature);
            deserializer.Read(out this.mcu_temperature);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.hardware_id);
            serializer.Write(this.firmware_commit);
            serializer.Write(this.mcu_uptime);
            serializer.Write(this.connection_uptime);
            serializer.Write(this.pcb_temperature);
            serializer.Write(this.mcu_temperature);
        }

        public override string ToString()
        {
            return "StatusMsg: " +
            "\nheader: " + header.ToString() +
            "\nhardware_id: " + hardware_id.ToString() +
            "\nfirmware_commit: " + firmware_commit.ToString() +
            "\nmcu_uptime: " + mcu_uptime.ToString() +
            "\nconnection_uptime: " + connection_uptime.ToString() +
            "\npcb_temperature: " + pcb_temperature.ToString() +
            "\nmcu_temperature: " + mcu_temperature.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
